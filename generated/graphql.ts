/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = T | null | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
};

/** Autogenerated input type of CreateTodo */
export type CreateTodoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: InputMaybe<Scalars['String']['input']>;
  content: Scalars['String']['input'];
  title: Scalars['String']['input'];
};

/** Autogenerated return type of CreateTodo. */
export type CreateTodoPayload = {
  __typename?: 'CreateTodoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  todo: Todo;
};

/** Autogenerated input type of DeleteTodo */
export type DeleteTodoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** Autogenerated return type of DeleteTodo. */
export type DeleteTodoPayload = {
  __typename?: 'DeleteTodoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  todo: Maybe<Todo>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createTodo: Maybe<CreateTodoPayload>;
  deleteTodo: Maybe<DeleteTodoPayload>;
  updateTodo: Maybe<UpdateTodoPayload>;
};


export type MutationCreateTodoArgs = {
  input: CreateTodoInput;
};


export type MutationDeleteTodoArgs = {
  input: DeleteTodoInput;
};


export type MutationUpdateTodoArgs = {
  input: UpdateTodoInput;
};

export type Query = {
  __typename?: 'Query';
  /** Get a specific todo by ID */
  todo: Maybe<Todo>;
  /** Get the total count of todos */
  todoCount: Scalars['Int']['output'];
  /** Get all todos */
  todos: Array<Todo>;
};


export type QueryTodoArgs = {
  id: Scalars['ID']['input'];
};


export type QueryTodosArgs = {
  limit: InputMaybe<Scalars['Int']['input']>;
};

export type Todo = {
  __typename?: 'Todo';
  content: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  title: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of UpdateTodo */
export type UpdateTodoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: InputMaybe<Scalars['String']['input']>;
  content: Scalars['String']['input'];
  id: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

/** Autogenerated return type of UpdateTodo. */
export type UpdateTodoPayload = {
  __typename?: 'UpdateTodoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  todo: Todo;
};

export type TodosQueryVariables = Exact<{ [key: string]: never; }>;


export type TodosQuery = { __typename?: 'Query', todoCount: number, todos: Array<{ __typename?: 'Todo', id: string, title: string | null, content: string | null }> };


export const TodosDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Todos"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"todos"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"Field","name":{"kind":"Name","value":"todoCount"}}]}}]} as unknown as DocumentNode<TodosQuery, TodosQueryVariables>;